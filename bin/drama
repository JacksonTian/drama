#!/usr/bin/env node
var fs = require('fs');
var fsx = require('fs-extra');
var path = require('path');
var ejs = require('ejs');
var argv = require('optimist')
  .usage('Usage: \ndrama init [project name]\ndrama act [name]')
  .demand('_').argv;

var cwd = process.cwd();

var noop = function (err) {
  if (err) {
    throw err;
  }
};

var view = fs.readFileSync(path.join(__dirname, '../template/view.ejs'), 'utf-8');
var css = fs.readFileSync(path.join(__dirname, '../template/css.ejs'), 'utf-8');
var script = fs.readFileSync(path.join(__dirname, '../template/script.ejs'), 'utf-8');
var initView = function (name, folder) {
  fsx.outputFileSync(path.join(folder, 'views', name + '.html'), ejs.render(view, {
    name: name
  }));
  fsx.outputFileSync(path.join(folder, 'styles', name + '.css'), ejs.render(css, {
    name: name
  }));
  fsx.outputFileSync(path.join(folder, 'scripts', name + '.js'), ejs.render(script, {
    name: name
  }));
};

var init = function (folder) {
  fsx.mkdirpSync(folder);
  fsx.mkdirpSync(path.join(folder, 'styles'));
  fsx.mkdirpSync(path.join(folder, 'scripts'));
  fsx.mkdirpSync(path.join(folder, 'views'));

  var index = fs.readFileSync(path.join(__dirname, '../template/index.ejs'), 'utf-8');
  var data = {
    views: ['index']
  };
  fs.writeFileSync(path.join(folder, 'index.html'), ejs.render(index, data));
  fsx.copy(path.join(__dirname, '../css'), path.join(folder, 'css'), noop);
  fsx.copy(path.join(__dirname, '../lib'), path.join(folder, 'lib'), noop);
  initView('index', folder);
};

switch (argv._[0]) {
case "init":
  init(argv._[1]);
  break;
case "act":
  initView(argv._[1], cwd);
  break;
}
